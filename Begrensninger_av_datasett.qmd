---
title: "Begrensninger av datasett"
author: "Marius Émil Lid"
date: today
date-format: "D MMMM, YYYY"
toc: true
toc-depth: 4
number-sections: true
format:
  html:
    self-contained: true
    code-tools:
      source: true
---

#### Justification and need for limiting data points

For å meningsfult analysere datasettet og hente ut mønstre/trekk fra ulike perspektiv i rom og tid, er det nødvending å begrense datasettet. Fra figuren nedenfor ser man hvordan rå-datapunktene fordeler seg utover verdenskartet.

```{r}
#| label: Installation packages
#| echo: false
#| message: false
#| warning: false

#install.packages("prettymapr")
#install.packages("ggspatial")
#install.packages("rnaturalearth")
#install.packages("rnaturalearthdata")
#install.packages("maps")
```

#### Distribution of datapoints across world map

```{r}
#| label: Distribution of datapoints across world map
#| message: false
#| warning: false

library(ggplot2)
library(dplyr)
library(maps)
library(stringr)
library(here)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
library(prettymapr)

herring_data_raw <- read.csv(
  here("HerringData.csv")) #currently stored as chr

herring_data_sorted <- herring_data_raw |> 
  mutate(
    lat = as.numeric(lat),
    lon = as.numeric(lon)
  )

herring_data_clean <- herring_data_sorted[!is.na(herring_data_sorted$lon) & !is.na(herring_data_sorted$lat), ]

herring_data_ready <- st_as_sf(herring_data_clean, coords = c("lon", "lat"), crs = 4326)

# with rnaturalearth
europe <- ne_countries(continent = "Europe", returnclass = "sf")
ggplot() +
  geom_sf(data = europe) +
  geom_sf(data = herring_data_ready, colour = "red") +
  #coord_sf(xlim = c(0, 30), ylim = c(55, 74))
  coord_sf(xlim = c(-21, 50), ylim = c(5, 81))
```

#### Distribution of data points inside bounding box

Fra datasettet (URL: https://doi.org/10.21335/NMDC-496562593) finner man **boundingboxWKT:** POLYGON((49.9 56.9,-21.9 56.9,-21.9 77.1,49.9 77.1,49.9 56.9)).

![](images/clipboard-1859238729.png)

Som vi ser fra figuren over verdenskartet, er det åpenbart visse punkt som overskrider polygonet angitt av metadataen. Neste steg blir dermed å analysere datasettet for å finne eventuelle avvik. Innledningvis er det enkelt å filtrere ut punkter utenfor det angitte polygonet. Utover dette er det nødvending å eliminere eventuelle datapunkt som treffer land. Disse må fjernes fra datasettet før videre behandling.

[Antall datapunkter]{.underline}

Land & hav: 406 016

Hav: 343 900

Differanse = 62 116

```{r}
#| label: Distribution of points inside bounding box
#| message: false
#| warning: false

library(readr)
library(dplyr)
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)

# Definer yttergrenser
lon_min <- -21.9
lon_max <- 49.9
lat_min <- 56.9
lat_max <- 77.1

# Last data
herring_data <- read_csv("HerringData.csv") |> 
  select(lon, lat) |> 
  mutate(
    lat = as.numeric(lat),
    lon = as.numeric(lon)
  ) |> 
  filter(
    !is.na(lat) & !is.na(lon),
    lon >= lon_min & lon <= lon_max,
    lat >= lat_min & lat <= lat_max
  )

# Bakgrunnskart
europe <- ne_countries(continent = "Europe", returnclass = "sf")

# Omvender df -> sf
herring_sf <- st_as_sf(herring_data, coords = c("lon", "lat"), crs = 4326)

# Slår av s2 for å unngå feil i kryssning mellom land/hav: https://r.geocompx.org/spatial-class section 2.2.9
sf_use_s2(FALSE)

# Sjekker om hvert punkt av herring_sf krysser _minst_ et land i europa. Krysser det _minst_ et land returneres TRUE
# info om spare = FALSE: https://r-spatial.github.io/sf/reference/geos_binary_pred.html
on_land <- rowSums(st_intersects(herring_sf, europe, sparse = FALSE)) > 0

# Filtrer vekk punkter som ligger på land
herring_sf_ocean <- herring_sf[!on_land, ]

# Lagrer ferdig behandlet kode
save(herring_sf_ocean, file = "herring_data_clean.rda")

# Kart
ggplot() +
  geom_sf(data = europe, fill = "antiquewhite", color = "gray60") +
  geom_sf(data = herring_sf, color = "red", alpha = 0.7, size = 1) +
  geom_sf(data = herring_sf_ocean, color = "blue", alpha = 0.7, size = 1) +
  coord_sf(xlim = c(lon_min, lon_max), ylim = c(lat_min, lat_max)) +
  theme_minimal() +
  labs(
    title = "Spatial location of Herring datapoints",
    subtitle = "Red = Land, Blue = Ocean",
    x = "Longitude",
    y = "Latitude"
  )
```

#### Locating unwanted data points marked inside bounding box

Forsøker meg på å opprette en buffer for å eventuelle ikke miste gyldige punkt

URL: <https://www.youtube.com/watch?v=ljZOyxo7QDQ>

Klarte ikke å benytte meg av ESPG:3857 web mercator for å opprette en buffer på 5km. Tror problemet er omvending fra grader til kilometer.

En annen løsning er å danne et multipolygon for punktene som tydelig er innenlands og kun fjerne dem. Da beholder man punktene langs kysten som "muligens" er gyldige.

```{r}
#| label: Unwanted datapoints marked inside bounding box
#| message: false
#| warning: false

library(readr)
library(dplyr)
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)

# Definer yttergrenser
lon_min <- -21.9
lon_max <- 49.9
lat_min <- 56.9
lat_max <- 77.1

# Lesing av csv fil
herring_data <- read_csv("HerringData.csv") |> 
  select(lon, lat) |> 
  mutate(
    lat = as.numeric(lat),
    lon = as.numeric(lon)
  ) |> 
  filter(
    !is.na(lat) & !is.na(lon),
    lon >= lon_min & lon <= lon_max,
    lat >= lat_min & lat <= lat_max
  )

# Omformer df -> sf
herring_sf <- st_as_sf(herring_data, coords = c("lon", "lat"), crs = 4326)

# Lager polygoner av datapunkt som jeg ønsker å fjerne
poly_norway_russia <- st_polygon(list(rbind(
  c(11.4, 57.6),
  c(11.4, 62.8), 
  c(50.0, 62.8),  
  c(50.0, 57.6),  
  c(11.4, 57.6)   
)))

poly_northern_norway <- st_polygon(list(rbind(
  c(23.1, 68.6),
  c(23.1, 68.0),
  c(24.7, 68.0),
  c(24.7, 68.6),
  c(23.1, 68.6)
  
)))

unwanted_datapoints <- st_sfc(poly_norway_russia, poly_northern_norway, crs = 4326)

# Kutter ut datapunkt i polygonene fra datasettet
inside_unwanted_datapoints <- st_intersects(herring_sf, unwanted_datapoints, sparse = FALSE)
herring_sf_ocean <- herring_sf[!apply(inside_unwanted_datapoints, 1, any), ]

# Bakgrunnskart
europe <- ne_countries(continent = "Europe", returnclass = "sf")

# Plot
ggplot() +
  geom_sf(data = europe, fill = "antiquewhite", color = "gray60") +
  geom_sf(data = herring_sf, color = "red", alpha = 0.7, size = 1) +
  geom_sf(data = unwanted_datapoints, fill = NA, color = "black", linetype = "dashed") +
  coord_sf(xlim = c(lon_min, lon_max), ylim = c(lat_min, lat_max)) +
  theme_minimal() +
  labs(
    title = "Spatial location of Herring datapoints",
    subtitle = "Red = Land, Blue = Ocean",
    x = "Longitude",
    y = "Latitude"
  )
```

#### Finished plot and datasett

Ferdigbehandlet plot med ønskede datapunkter fjernet.

Observasjoner i rå data (herring_sf) = 405 824

Antall datapunkter fjernet: 406 016 - 405 824 = [192]{.underline}

```{r}
#| label: Completed map
#| message: false
#| warning: false

library(readr)
library(dplyr)
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)

# Definer yttergrenser
lon_min <- -21.9
lon_max <- 49.9
lat_min <- 56.9
lat_max <- 77.1

# Lager polygoner av datapunkt som jeg ønsker å fjerne
poly_norway_russia <- st_polygon(list(rbind(
  c(11.4, 57.6),
  c(11.4, 62.8), 
  c(50.0, 62.8),  
  c(50.0, 57.6),  
  c(11.4, 57.6)   
)))

poly_northern_norway <- st_polygon(list(rbind(
  c(23.1, 68.6),
  c(23.1, 68.0),
  c(24.7, 68.0),
  c(24.7, 68.6),
  c(23.1, 68.6)
  
)))

unwanted_datapoints <- st_sfc(poly_northern_norway, poly_norway_russia, crs = 4326)

# Lesing av csv fil med konverting til sf objekt
herring_sf <- read_csv("HerringData.csv") |>
  mutate(
    across(everything(), as.numeric)
  ) |>
  filter(
    !is.na(lat) & !is.na(lon),
    lon >= lon_min & lon <= lon_max,
    lat >= lat_min & lat <= lat_max
  ) |> 
  st_as_sf(coords = c("lon", "lat"), crs = 4326)

# Kutter ut datapunkt i polygonene fra datasettet
inside_unwanted_datapoints <- st_intersects(herring_sf, unwanted_datapoints, sparse = FALSE)
herring_sf <- herring_sf[!apply(inside_unwanted_datapoints, 1, any), ]

# Bakgrunnskart
europe <- ne_countries(continent = "Europe", returnclass = "sf")

# Plot
ggplot() +
  geom_sf(data = europe, fill = "antiquewhite", color = "gray60") +
  geom_sf(data = herring_sf, color = "red", alpha = 0.7, size = 1) +
  coord_sf(xlim = c(lon_min, lon_max), ylim = c(lat_min, lat_max)) +
  theme_minimal() +
  labs(
    title = "Spatial location of Herring datapoints",
    x = "Longitude",
    y = "Latitude"
  )
```

Rent og ryddig ferdigbehandlet datasett

```{r}
#| label: Bakgrunnskode
#| message: false
#| warning: false

library(readr)
library(dplyr)
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)

# Definer yttergrenser
lon_min <- -21.9
lon_max <- 49.9
lat_min <- 56.9
lat_max <- 77.1

# Lager polygoner av datapunkt som jeg ønsker å fjerne
poly_norway_russia <- st_polygon(list(rbind(
  c(11.4, 57.6),
  c(11.4, 62.8), 
  c(50.0, 62.8),  
  c(50.0, 57.6),  
  c(11.4, 57.6)   
)))

poly_northern_norway <- st_polygon(list(rbind(
  c(23.1, 68.6),
  c(23.1, 68.0),
  c(24.7, 68.0),
  c(24.7, 68.6),
  c(23.1, 68.6)
  
)))

unwanted_datapoints <- st_sfc(poly_northern_norway, poly_norway_russia, crs = 4326)

herring_data <- read_csv("HerringData.csv") |>
  mutate(across(everything(), as.numeric)
  ) |>
  filter(
    !is.na(lat) & !is.na(lon),
    lon >= lon_min & lon <= lon_max,
    lat >= lat_min & lat <= lat_max
  ) 

# omformer fra df til sf
herring_sf <- st_as_sf(herring_data, coords = c("lon", "lat"), crs = 4326)

# Finner og kutter ut datapunkt fra polygonene i det rå datasettet
inside_unwanted_datapoints <- st_intersects(herring_sf, unwanted_datapoints, sparse = FALSE)
herring_data <- herring_data[!apply(inside_unwanted_datapoints, 1, any), ]

# Lagrer ferdig behandlet kode
saveRDS(herring_data, file = "herring_data.rds")
```

```{r}
#| label: Completed map_v2
#| message: false
#| warning: false

library(readr)
library(dplyr)
library(sf)
library(rnaturalearth)
library(ggplot2)

load("herring_data_alt.rda")

# Plot
ggplot() +
  geom_sf(data = europe, fill = "antiquewhite", color = "gray60") +
  geom_sf(data = herring_sf, color = "red", alpha = 0.7, size = 1) +
  coord_sf(xlim = c(lon_min, lon_max), ylim = c(lat_min, lat_max)) +
  theme_minimal() +
  labs(
    title = "Spatial location of Herring datapoints",
    x = "Longitude",
    y = "Latitude"
  )
```
